//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  /// This `R.font` struct is generated, and contains static references to 10 fonts.
  struct font: Rswift.Validatable {
    /// Font `OpenSans-BoldItalic`.
    static let openSansBoldItalic = Rswift.FontResource(fontName: "OpenSans-BoldItalic")
    /// Font `OpenSans-Bold`.
    static let openSansBold = Rswift.FontResource(fontName: "OpenSans-Bold")
    /// Font `OpenSans-ExtraBoldItalic`.
    static let openSansExtraBoldItalic = Rswift.FontResource(fontName: "OpenSans-ExtraBoldItalic")
    /// Font `OpenSans-ExtraBold`.
    static let openSansExtraBold = Rswift.FontResource(fontName: "OpenSans-ExtraBold")
    /// Font `OpenSans-Italic`.
    static let openSansItalic = Rswift.FontResource(fontName: "OpenSans-Italic")
    /// Font `OpenSans-LightItalic`.
    static let openSansLightItalic = Rswift.FontResource(fontName: "OpenSans-LightItalic")
    /// Font `OpenSans-Light`.
    static let openSansLight = Rswift.FontResource(fontName: "OpenSans-Light")
    /// Font `OpenSans-Regular`.
    static let openSansRegular = Rswift.FontResource(fontName: "OpenSans-Regular")
    /// Font `OpenSans-SemiBoldItalic`.
    static let openSansSemiBoldItalic = Rswift.FontResource(fontName: "OpenSans-SemiBoldItalic")
    /// Font `OpenSans-SemiBold`.
    static let openSansSemiBold = Rswift.FontResource(fontName: "OpenSans-SemiBold")

    /// `UIFont(name: "OpenSans-Bold", size: ...)`
    static func openSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBold, size: size)
    }

    /// `UIFont(name: "OpenSans-BoldItalic", size: ...)`
    static func openSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraBold", size: ...)`
    static func openSansExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraBold, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraBoldItalic", size: ...)`
    static func openSansExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Italic", size: ...)`
    static func openSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Light", size: ...)`
    static func openSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLight, size: size)
    }

    /// `UIFont(name: "OpenSans-LightItalic", size: ...)`
    static func openSansLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLightItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Regular", size: ...)`
    static func openSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansRegular, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBold", size: ...)`
    static func openSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBold, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBoldItalic", size: ...)`
    static func openSansSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBoldItalic, size: size)
    }

    static func validate() throws {
      if R.font.openSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Bold' could not be loaded, is 'OpenSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-BoldItalic' could not be loaded, is 'OpenSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraBold' could not be loaded, is 'OpenSans-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraBoldItalic' could not be loaded, is 'OpenSans-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Italic' could not be loaded, is 'OpenSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Light' could not be loaded, is 'OpenSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-LightItalic' could not be loaded, is 'OpenSans-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Regular' could not be loaded, is 'OpenSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBold' could not be loaded, is 'OpenSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBoldItalic' could not be loaded, is 'OpenSans-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 89 images.
  struct image {
    /// Image `Facebook-2`.
    static let facebook2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Facebook-2")
    /// Image `add_photo`.
    static let add_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "add_photo")
    /// Image `adjusted_ratio`.
    static let adjusted_ratio = Rswift.ImageResource(bundle: R.hostingBundle, name: "adjusted_ratio")
    /// Image `adjusted_vertical`.
    static let adjusted_vertical = Rswift.ImageResource(bundle: R.hostingBundle, name: "adjusted_vertical")
    /// Image `apple`.
    static let apple = Rswift.ImageResource(bundle: R.hostingBundle, name: "apple")
    /// Image `background_frame`.
    static let background_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "background_frame")
    /// Image `camera`.
    static let camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera")
    /// Image `change_device`.
    static let change_device = Rswift.ImageResource(bundle: R.hostingBundle, name: "change_device")
    /// Image `change_template`.
    static let change_template = Rswift.ImageResource(bundle: R.hostingBundle, name: "change_template")
    /// Image `choose_photos`.
    static let choose_photos = Rswift.ImageResource(bundle: R.hostingBundle, name: "choose_photos")
    /// Image `confirm_icon`.
    static let confirm_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirm_icon")
    /// Image `design_delete`.
    static let design_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "design_delete")
    /// Image `down_arrow`.
    static let down_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "down_arrow")
    /// Image `edit_text_icon`.
    static let edit_text_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_text_icon")
    /// Image `effects`.
    static let effects = Rswift.ImageResource(bundle: R.hostingBundle, name: "effects")
    /// Image `eye_style_frame`.
    static let eye_style_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye_style_frame")
    /// Image `facebook-1`.
    static let facebook1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-1")
    /// Image `facebook-logo-png-38362`.
    static let facebookLogoPng38362 = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook-logo-png-38362")
    /// Image `facebook`.
    static let facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook")
    /// Image `filter_n0`.
    static let filter_n0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n0")
    /// Image `filter_n10`.
    static let filter_n10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n10")
    /// Image `filter_n11`.
    static let filter_n11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n11")
    /// Image `filter_n12`.
    static let filter_n12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n12")
    /// Image `filter_n13`.
    static let filter_n13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n13")
    /// Image `filter_n1`.
    static let filter_n1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n1")
    /// Image `filter_n2`.
    static let filter_n2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n2")
    /// Image `filter_n3`.
    static let filter_n3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n3")
    /// Image `filter_n4`.
    static let filter_n4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n4")
    /// Image `filter_n5`.
    static let filter_n5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n5")
    /// Image `filter_n6`.
    static let filter_n6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n6")
    /// Image `filter_n7`.
    static let filter_n7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n7")
    /// Image `filter_n8`.
    static let filter_n8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n8")
    /// Image `filter_n9`.
    static let filter_n9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter_n9")
    /// Image `flip`.
    static let flip = Rswift.ImageResource(bundle: R.hostingBundle, name: "flip")
    /// Image `focused_text_bar`.
    static let focused_text_bar = Rswift.ImageResource(bundle: R.hostingBundle, name: "focused_text_bar")
    /// Image `google`.
    static let google = Rswift.ImageResource(bundle: R.hostingBundle, name: "google")
    /// Image `hidden_selection`.
    static let hidden_selection = Rswift.ImageResource(bundle: R.hostingBundle, name: "hidden_selection")
    /// Image `icon_delete_frame`.
    static let icon_delete_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_delete_frame")
    /// Image `icon_resize_frame`.
    static let icon_resize_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_resize_frame")
    /// Image `icon_rotate_frame`.
    static let icon_rotate_frame = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_rotate_frame")
    /// Image `info`.
    static let info = Rswift.ImageResource(bundle: R.hostingBundle, name: "info")
    /// Image `instagram`.
    static let instagram = Rswift.ImageResource(bundle: R.hostingBundle, name: "instagram")
    /// Image `iphone_template`.
    static let iphone_template = Rswift.ImageResource(bundle: R.hostingBundle, name: "iphone_template")
    /// Image `keyboard`.
    static let keyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "keyboard")
    /// Image `lock_scroll_content`.
    static let lock_scroll_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_scroll_content")
    /// Image `login`.
    static let login = Rswift.ImageResource(bundle: R.hostingBundle, name: "login")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `menu_bar_new_photo`.
    static let menu_bar_new_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_bar_new_photo")
    /// Image `menu_bar_new_sticker`.
    static let menu_bar_new_sticker = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_bar_new_sticker")
    /// Image `menu_bar_new_text`.
    static let menu_bar_new_text = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_bar_new_text")
    /// Image `navigation_back`.
    static let navigation_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation_back")
    /// Image `navigation_next`.
    static let navigation_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation_next")
    /// Image `next`.
    static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "next")
    /// Image `policy`.
    static let policy = Rswift.ImageResource(bundle: R.hostingBundle, name: "policy")
    /// Image `rotate`.
    static let rotate = Rswift.ImageResource(bundle: R.hostingBundle, name: "rotate")
    /// Image `save_design`.
    static let save_design = Rswift.ImageResource(bundle: R.hostingBundle, name: "save_design")
    /// Image `setting_brightness`.
    static let setting_brightness = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_brightness")
    /// Image `setting_contrast`.
    static let setting_contrast = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_contrast")
    /// Image `setting_filter`.
    static let setting_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_filter")
    /// Image `setting_format`.
    static let setting_format = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_format")
    /// Image `setting_round_corner`.
    static let setting_round_corner = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_round_corner")
    /// Image `setting_saturation`.
    static let setting_saturation = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting_saturation")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `style_frame_layers`.
    static let style_frame_layers = Rswift.ImageResource(bundle: R.hostingBundle, name: "style_frame_layers")
    /// Image `survey`.
    static let survey = Rswift.ImageResource(bundle: R.hostingBundle, name: "survey")
    /// Image `tabbar_cart_active`.
    static let tabbar_cart_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_cart_active")
    /// Image `tabbar_cart`.
    static let tabbar_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_cart")
    /// Image `tabbar_history_active`.
    static let tabbar_history_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_history_active")
    /// Image `tabbar_history`.
    static let tabbar_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_history")
    /// Image `tabbar_home_active`.
    static let tabbar_home_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_active")
    /// Image `tabbar_home`.
    static let tabbar_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home")
    /// Image `tabbar_infor_active`.
    static let tabbar_infor_active = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_infor_active")
    /// Image `tabbar_infor`.
    static let tabbar_infor = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_infor")
    /// Image `template`.
    static let template = Rswift.ImageResource(bundle: R.hostingBundle, name: "template")
    /// Image `text_align_left`.
    static let text_align_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_align_left")
    /// Image `text_align_right`.
    static let text_align_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_align_right")
    /// Image `text_align`.
    static let text_align = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_align")
    /// Image `text_capitalized`.
    static let text_capitalized = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_capitalized")
    /// Image `text_color`.
    static let text_color = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_color")
    /// Image `text_distance`.
    static let text_distance = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_distance")
    /// Image `text_done`.
    static let text_done = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_done")
    /// Image `text_font_size`.
    static let text_font_size = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_font_size")
    /// Image `text_font`.
    static let text_font = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_font")
    /// Image `text_interline`.
    static let text_interline = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_interline")
    /// Image `text_lowercased`.
    static let text_lowercased = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_lowercased")
    /// Image `text_shadow`.
    static let text_shadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_shadow")
    /// Image `text_uppercase`.
    static let text_uppercase = Rswift.ImageResource(bundle: R.hostingBundle, name: "text_uppercase")
    /// Image `trash`.
    static let trash = Rswift.ImageResource(bundle: R.hostingBundle, name: "trash")
    /// Image `unlock_scroll_content`.
    static let unlock_scroll_content = Rswift.ImageResource(bundle: R.hostingBundle, name: "unlock_scroll_content")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Facebook-2", bundle: ..., traitCollection: ...)`
    static func facebook2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "add_photo", bundle: ..., traitCollection: ...)`
    static func add_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "adjusted_ratio", bundle: ..., traitCollection: ...)`
    static func adjusted_ratio(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adjusted_ratio, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "adjusted_vertical", bundle: ..., traitCollection: ...)`
    static func adjusted_vertical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.adjusted_vertical, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "apple", bundle: ..., traitCollection: ...)`
    static func apple(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.apple, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background_frame", bundle: ..., traitCollection: ...)`
    static func background_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera", bundle: ..., traitCollection: ...)`
    static func camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "change_device", bundle: ..., traitCollection: ...)`
    static func change_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.change_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "change_template", bundle: ..., traitCollection: ...)`
    static func change_template(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.change_template, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "choose_photos", bundle: ..., traitCollection: ...)`
    static func choose_photos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.choose_photos, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confirm_icon", bundle: ..., traitCollection: ...)`
    static func confirm_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirm_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "design_delete", bundle: ..., traitCollection: ...)`
    static func design_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.design_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "down_arrow", bundle: ..., traitCollection: ...)`
    static func down_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_text_icon", bundle: ..., traitCollection: ...)`
    static func edit_text_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_text_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "effects", bundle: ..., traitCollection: ...)`
    static func effects(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.effects, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye_style_frame", bundle: ..., traitCollection: ...)`
    static func eye_style_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye_style_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook", bundle: ..., traitCollection: ...)`
    static func facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-1", bundle: ..., traitCollection: ...)`
    static func facebook1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook-logo-png-38362", bundle: ..., traitCollection: ...)`
    static func facebookLogoPng38362(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebookLogoPng38362, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n0", bundle: ..., traitCollection: ...)`
    static func filter_n0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n1", bundle: ..., traitCollection: ...)`
    static func filter_n1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n10", bundle: ..., traitCollection: ...)`
    static func filter_n10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n11", bundle: ..., traitCollection: ...)`
    static func filter_n11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n12", bundle: ..., traitCollection: ...)`
    static func filter_n12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n13", bundle: ..., traitCollection: ...)`
    static func filter_n13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n2", bundle: ..., traitCollection: ...)`
    static func filter_n2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n3", bundle: ..., traitCollection: ...)`
    static func filter_n3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n4", bundle: ..., traitCollection: ...)`
    static func filter_n4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n5", bundle: ..., traitCollection: ...)`
    static func filter_n5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n6", bundle: ..., traitCollection: ...)`
    static func filter_n6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n7", bundle: ..., traitCollection: ...)`
    static func filter_n7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n8", bundle: ..., traitCollection: ...)`
    static func filter_n8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter_n9", bundle: ..., traitCollection: ...)`
    static func filter_n9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter_n9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flip", bundle: ..., traitCollection: ...)`
    static func flip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "focused_text_bar", bundle: ..., traitCollection: ...)`
    static func focused_text_bar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.focused_text_bar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google", bundle: ..., traitCollection: ...)`
    static func google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hidden_selection", bundle: ..., traitCollection: ...)`
    static func hidden_selection(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hidden_selection, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_delete_frame", bundle: ..., traitCollection: ...)`
    static func icon_delete_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_delete_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_resize_frame", bundle: ..., traitCollection: ...)`
    static func icon_resize_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_resize_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_rotate_frame", bundle: ..., traitCollection: ...)`
    static func icon_rotate_frame(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_rotate_frame, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "info", bundle: ..., traitCollection: ...)`
    static func info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "instagram", bundle: ..., traitCollection: ...)`
    static func instagram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.instagram, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iphone_template", bundle: ..., traitCollection: ...)`
    static func iphone_template(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iphone_template, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "keyboard", bundle: ..., traitCollection: ...)`
    static func keyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keyboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lock_scroll_content", bundle: ..., traitCollection: ...)`
    static func lock_scroll_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_scroll_content, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login", bundle: ..., traitCollection: ...)`
    static func login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_bar_new_photo", bundle: ..., traitCollection: ...)`
    static func menu_bar_new_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_bar_new_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_bar_new_sticker", bundle: ..., traitCollection: ...)`
    static func menu_bar_new_sticker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_bar_new_sticker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_bar_new_text", bundle: ..., traitCollection: ...)`
    static func menu_bar_new_text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_bar_new_text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation_back", bundle: ..., traitCollection: ...)`
    static func navigation_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation_next", bundle: ..., traitCollection: ...)`
    static func navigation_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "next", bundle: ..., traitCollection: ...)`
    static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "policy", bundle: ..., traitCollection: ...)`
    static func policy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.policy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rotate", bundle: ..., traitCollection: ...)`
    static func rotate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rotate, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "save_design", bundle: ..., traitCollection: ...)`
    static func save_design(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.save_design, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_brightness", bundle: ..., traitCollection: ...)`
    static func setting_brightness(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_brightness, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_contrast", bundle: ..., traitCollection: ...)`
    static func setting_contrast(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_contrast, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_filter", bundle: ..., traitCollection: ...)`
    static func setting_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_format", bundle: ..., traitCollection: ...)`
    static func setting_format(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_format, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_round_corner", bundle: ..., traitCollection: ...)`
    static func setting_round_corner(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_round_corner, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "setting_saturation", bundle: ..., traitCollection: ...)`
    static func setting_saturation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting_saturation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "style_frame_layers", bundle: ..., traitCollection: ...)`
    static func style_frame_layers(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.style_frame_layers, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "survey", bundle: ..., traitCollection: ...)`
    static func survey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.survey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_cart", bundle: ..., traitCollection: ...)`
    static func tabbar_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_cart_active", bundle: ..., traitCollection: ...)`
    static func tabbar_cart_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_cart_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_history", bundle: ..., traitCollection: ...)`
    static func tabbar_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_history_active", bundle: ..., traitCollection: ...)`
    static func tabbar_history_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_history_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home", bundle: ..., traitCollection: ...)`
    static func tabbar_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_active", bundle: ..., traitCollection: ...)`
    static func tabbar_home_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_infor", bundle: ..., traitCollection: ...)`
    static func tabbar_infor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_infor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_infor_active", bundle: ..., traitCollection: ...)`
    static func tabbar_infor_active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_infor_active, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "template", bundle: ..., traitCollection: ...)`
    static func template(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.template, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_align", bundle: ..., traitCollection: ...)`
    static func text_align(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_align, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_align_left", bundle: ..., traitCollection: ...)`
    static func text_align_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_align_left, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_align_right", bundle: ..., traitCollection: ...)`
    static func text_align_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_align_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_capitalized", bundle: ..., traitCollection: ...)`
    static func text_capitalized(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_capitalized, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_color", bundle: ..., traitCollection: ...)`
    static func text_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_distance", bundle: ..., traitCollection: ...)`
    static func text_distance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_distance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_done", bundle: ..., traitCollection: ...)`
    static func text_done(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_done, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_font", bundle: ..., traitCollection: ...)`
    static func text_font(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_font, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_font_size", bundle: ..., traitCollection: ...)`
    static func text_font_size(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_font_size, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_interline", bundle: ..., traitCollection: ...)`
    static func text_interline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_interline, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_lowercased", bundle: ..., traitCollection: ...)`
    static func text_lowercased(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_lowercased, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_shadow", bundle: ..., traitCollection: ...)`
    static func text_shadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_shadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "text_uppercase", bundle: ..., traitCollection: ...)`
    static func text_uppercase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.text_uppercase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "trash", bundle: ..., traitCollection: ...)`
    static func trash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unlock_scroll_content", bundle: ..., traitCollection: ...)`
    static func unlock_scroll_content(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unlock_scroll_content, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 47 localization keys.
    struct localizable {
      /// en translation: Bạn chưa có đơn hàng nào.
      ///
      /// Locales: en, vi
      static let cart_empty = Rswift.StringResource(key: "cart_empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chia sẻ
      ///
      /// Locales: en, vi
      static let information_share = Rswift.StringResource(key: "information_share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chào mừng bạn đến Ốp Đẹp
      ///
      /// Locales: en, vi
      static let title_login = Rswift.StringResource(key: "title_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chèn hình ảnh
      ///
      /// Locales: en, vi
      static let editor_Insert_Image = Rswift.StringResource(key: "editor_Insert_Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chính sách
      ///
      /// Locales: en, vi
      static let information_term = Rswift.StringResource(key: "information_term", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chỉnh sửa hình ảnh
      ///
      /// Locales: en, vi
      static let editor_attribute_image = Rswift.StringResource(key: "editor_attribute_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chỉnh sửa màu nền
      ///
      /// Locales: en, vi
      static let editor_attribute_color = Rswift.StringResource(key: "editor_attribute_color", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chỉnh sửa văn bản
      ///
      /// Locales: en, vi
      static let editor_attribute_text = Rswift.StringResource(key: "editor_attribute_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chọn ảnh có sẵn
      ///
      /// Locales: en, vi
      static let editor_from_photo_library = Rswift.StringResource(key: "editor_from_photo_library", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Chụp ảnh
      ///
      /// Locales: en, vi
      static let editor_from_camera = Rswift.StringResource(key: "editor_from_camera", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Code
      ///
      /// Locales: en, vi
      static let placeholder_otp = Rswift.StringResource(key: "placeholder_otp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Cài đặt
      ///
      /// Locales: en, vi
      static let information_settings = Rswift.StringResource(key: "information_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Facebook
      ///
      /// Locales: en, vi
      static let information_facebook = Rswift.StringResource(key: "information_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Giỏ Hàng
      ///
      /// Locales: en, vi
      static let cart_title = Rswift.StringResource(key: "cart_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Góp ý - Đánh giá
      ///
      /// Locales: en, vi
      static let information_survey = Rswift.StringResource(key: "information_survey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Hiệu ứng
      ///
      /// Locales: en, vi
      static let editor_effects = Rswift.StringResource(key: "editor_effects", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: HÌNH NỀN
      ///
      /// Locales: en, vi
      static let editor_background = Rswift.StringResource(key: "editor_background", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Instagram
      ///
      /// Locales: en, vi
      static let information_instagram = Rswift.StringResource(key: "information_instagram", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: KHUNG HÌNH
      ///
      /// Locales: en, vi
      static let editor_frame = Rswift.StringResource(key: "editor_frame", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Kiểm tra thiết kế
      ///
      /// Locales: en, vi
      static let upload_design_title = Rswift.StringResource(key: "upload_design_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Kết cấu
      ///
      /// Locales: en, vi
      static let editor_textures = Rswift.StringResource(key: "editor_textures", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Lịch sử đơn hàng
      ///
      /// Locales: en, vi
      static let information_history_order = Rswift.StringResource(key: "information_history_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Màu nền
      ///
      /// Locales: en, vi
      static let editor_color = Rswift.StringResource(key: "editor_color", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Màu sắc
      ///
      /// Locales: en, vi
      static let editor_colours = Rswift.StringResource(key: "editor_colours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Mẫu
      ///
      /// Locales: en, vi
      static let editor_pattern = Rswift.StringResource(key: "editor_pattern", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Nhập số điện thoại
      ///
      /// Locales: en, vi
      static let placeholder_phone = Rswift.StringResource(key: "placeholder_phone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Phí giao hàng nhanh
      ///
      /// Locales: en, vi
      static let cart_shipping_price = Rswift.StringResource(key: "cart_shipping_price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Sticker
      ///
      /// Locales: en, vi
      static let editor_sticker = Rswift.StringResource(key: "editor_sticker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Số Lượng
      ///
      /// Locales: en, vi
      static let cart_quantity = Rswift.StringResource(key: "cart_quantity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Thiết Kế Của Bạn
      ///
      /// Locales: en, vi
      static let your_design = Rswift.StringResource(key: "your_design", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Thêm Chữ
      ///
      /// Locales: en, vi
      static let editor_text = Rswift.StringResource(key: "editor_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Thông tin chung
      ///
      /// Locales: en, vi
      static let information_common = Rswift.StringResource(key: "information_common", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Thông tin nhận hàng
      ///
      /// Locales: en, vi
      static let information_received_order = Rswift.StringResource(key: "information_received_order", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Tiếp tục
      ///
      /// Locales: en, vi
      static let cart_next = Rswift.StringResource(key: "cart_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Tiếp tục đặt hàng
      ///
      /// Locales: en, vi
      static let upload_design_next = Rswift.StringResource(key: "upload_design_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Tổng tiền
      ///
      /// Locales: en, vi
      static let cart_total_price = Rswift.StringResource(key: "cart_total_price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vui lòng chèn hình ảnh mà bạn có thể tạo hiệu ứng
      ///
      /// Locales: en, vi
      static let editor_no_image = Rswift.StringResource(key: "editor_no_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Vui lòng chèn văn bản của bạn
      ///
      /// Locales: en, vi
      static let editor_no_text = Rswift.StringResource(key: "editor_no_text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Xoá
      ///
      /// Locales: en, vi
      static let cart_delete = Rswift.StringResource(key: "cart_delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Xác minh số điện thoại
      ///
      /// Locales: en, vi
      static let button_submit = Rswift.StringResource(key: "button_submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Xác nhận
      ///
      /// Locales: en, vi
      static let button_confirm = Rswift.StringResource(key: "button_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Xóa ảnh
      ///
      /// Locales: en, vi
      static let editor_reset = Rswift.StringResource(key: "editor_reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đăng ký / Đăng nhập
      ///
      /// Locales: en, vi
      static let information_auth = Rswift.StringResource(key: "information_auth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đăng nhập để tiếp tục
      ///
      /// Locales: en, vi
      static let description_login = Rswift.StringResource(key: "description_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Đăng xuất
      ///
      /// Locales: en, vi
      static let information_auth_no_login = Rswift.StringResource(key: "information_auth_no_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Ảnh
      ///
      /// Locales: en, vi
      static let editor_image = Rswift.StringResource(key: "editor_image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)
      /// en translation: Ảnh của bạn
      ///
      /// Locales: en, vi
      static let editor_your_photo = Rswift.StringResource(key: "editor_your_photo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi"], comment: nil)

      /// en translation: Bạn chưa có đơn hàng nào.
      ///
      /// Locales: en, vi
      static func cart_empty(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_empty", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_empty"
        }

        return NSLocalizedString("cart_empty", bundle: bundle, comment: "")
      }

      /// en translation: Chia sẻ
      ///
      /// Locales: en, vi
      static func information_share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_share"
        }

        return NSLocalizedString("information_share", bundle: bundle, comment: "")
      }

      /// en translation: Chào mừng bạn đến Ốp Đẹp
      ///
      /// Locales: en, vi
      static func title_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("title_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "title_login"
        }

        return NSLocalizedString("title_login", bundle: bundle, comment: "")
      }

      /// en translation: Chèn hình ảnh
      ///
      /// Locales: en, vi
      static func editor_Insert_Image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_Insert_Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_Insert_Image"
        }

        return NSLocalizedString("editor_Insert_Image", bundle: bundle, comment: "")
      }

      /// en translation: Chính sách
      ///
      /// Locales: en, vi
      static func information_term(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_term", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_term"
        }

        return NSLocalizedString("information_term", bundle: bundle, comment: "")
      }

      /// en translation: Chỉnh sửa hình ảnh
      ///
      /// Locales: en, vi
      static func editor_attribute_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_attribute_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_attribute_image"
        }

        return NSLocalizedString("editor_attribute_image", bundle: bundle, comment: "")
      }

      /// en translation: Chỉnh sửa màu nền
      ///
      /// Locales: en, vi
      static func editor_attribute_color(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_attribute_color", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_attribute_color"
        }

        return NSLocalizedString("editor_attribute_color", bundle: bundle, comment: "")
      }

      /// en translation: Chỉnh sửa văn bản
      ///
      /// Locales: en, vi
      static func editor_attribute_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_attribute_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_attribute_text"
        }

        return NSLocalizedString("editor_attribute_text", bundle: bundle, comment: "")
      }

      /// en translation: Chọn ảnh có sẵn
      ///
      /// Locales: en, vi
      static func editor_from_photo_library(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_from_photo_library", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_from_photo_library"
        }

        return NSLocalizedString("editor_from_photo_library", bundle: bundle, comment: "")
      }

      /// en translation: Chụp ảnh
      ///
      /// Locales: en, vi
      static func editor_from_camera(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_from_camera", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_from_camera"
        }

        return NSLocalizedString("editor_from_camera", bundle: bundle, comment: "")
      }

      /// en translation: Code
      ///
      /// Locales: en, vi
      static func placeholder_otp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_otp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_otp"
        }

        return NSLocalizedString("placeholder_otp", bundle: bundle, comment: "")
      }

      /// en translation: Cài đặt
      ///
      /// Locales: en, vi
      static func information_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_settings"
        }

        return NSLocalizedString("information_settings", bundle: bundle, comment: "")
      }

      /// en translation: Facebook
      ///
      /// Locales: en, vi
      static func information_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_facebook"
        }

        return NSLocalizedString("information_facebook", bundle: bundle, comment: "")
      }

      /// en translation: Giỏ Hàng
      ///
      /// Locales: en, vi
      static func cart_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_title"
        }

        return NSLocalizedString("cart_title", bundle: bundle, comment: "")
      }

      /// en translation: Góp ý - Đánh giá
      ///
      /// Locales: en, vi
      static func information_survey(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_survey", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_survey"
        }

        return NSLocalizedString("information_survey", bundle: bundle, comment: "")
      }

      /// en translation: Hiệu ứng
      ///
      /// Locales: en, vi
      static func editor_effects(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_effects", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_effects"
        }

        return NSLocalizedString("editor_effects", bundle: bundle, comment: "")
      }

      /// en translation: HÌNH NỀN
      ///
      /// Locales: en, vi
      static func editor_background(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_background", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_background"
        }

        return NSLocalizedString("editor_background", bundle: bundle, comment: "")
      }

      /// en translation: Instagram
      ///
      /// Locales: en, vi
      static func information_instagram(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_instagram", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_instagram"
        }

        return NSLocalizedString("information_instagram", bundle: bundle, comment: "")
      }

      /// en translation: KHUNG HÌNH
      ///
      /// Locales: en, vi
      static func editor_frame(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_frame", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_frame"
        }

        return NSLocalizedString("editor_frame", bundle: bundle, comment: "")
      }

      /// en translation: Kiểm tra thiết kế
      ///
      /// Locales: en, vi
      static func upload_design_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upload_design_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upload_design_title"
        }

        return NSLocalizedString("upload_design_title", bundle: bundle, comment: "")
      }

      /// en translation: Kết cấu
      ///
      /// Locales: en, vi
      static func editor_textures(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_textures", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_textures"
        }

        return NSLocalizedString("editor_textures", bundle: bundle, comment: "")
      }

      /// en translation: Lịch sử đơn hàng
      ///
      /// Locales: en, vi
      static func information_history_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_history_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_history_order"
        }

        return NSLocalizedString("information_history_order", bundle: bundle, comment: "")
      }

      /// en translation: Màu nền
      ///
      /// Locales: en, vi
      static func editor_color(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_color", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_color"
        }

        return NSLocalizedString("editor_color", bundle: bundle, comment: "")
      }

      /// en translation: Màu sắc
      ///
      /// Locales: en, vi
      static func editor_colours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_colours", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_colours"
        }

        return NSLocalizedString("editor_colours", bundle: bundle, comment: "")
      }

      /// en translation: Mẫu
      ///
      /// Locales: en, vi
      static func editor_pattern(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_pattern", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_pattern"
        }

        return NSLocalizedString("editor_pattern", bundle: bundle, comment: "")
      }

      /// en translation: Nhập số điện thoại
      ///
      /// Locales: en, vi
      static func placeholder_phone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("placeholder_phone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "placeholder_phone"
        }

        return NSLocalizedString("placeholder_phone", bundle: bundle, comment: "")
      }

      /// en translation: Phí giao hàng nhanh
      ///
      /// Locales: en, vi
      static func cart_shipping_price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_shipping_price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_shipping_price"
        }

        return NSLocalizedString("cart_shipping_price", bundle: bundle, comment: "")
      }

      /// en translation: Sticker
      ///
      /// Locales: en, vi
      static func editor_sticker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_sticker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_sticker"
        }

        return NSLocalizedString("editor_sticker", bundle: bundle, comment: "")
      }

      /// en translation: Số Lượng
      ///
      /// Locales: en, vi
      static func cart_quantity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_quantity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_quantity"
        }

        return NSLocalizedString("cart_quantity", bundle: bundle, comment: "")
      }

      /// en translation: Thiết Kế Của Bạn
      ///
      /// Locales: en, vi
      static func your_design(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("your_design", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "your_design"
        }

        return NSLocalizedString("your_design", bundle: bundle, comment: "")
      }

      /// en translation: Thêm Chữ
      ///
      /// Locales: en, vi
      static func editor_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_text"
        }

        return NSLocalizedString("editor_text", bundle: bundle, comment: "")
      }

      /// en translation: Thông tin chung
      ///
      /// Locales: en, vi
      static func information_common(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_common"
        }

        return NSLocalizedString("information_common", bundle: bundle, comment: "")
      }

      /// en translation: Thông tin nhận hàng
      ///
      /// Locales: en, vi
      static func information_received_order(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_received_order", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_received_order"
        }

        return NSLocalizedString("information_received_order", bundle: bundle, comment: "")
      }

      /// en translation: Tiếp tục
      ///
      /// Locales: en, vi
      static func cart_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_next"
        }

        return NSLocalizedString("cart_next", bundle: bundle, comment: "")
      }

      /// en translation: Tiếp tục đặt hàng
      ///
      /// Locales: en, vi
      static func upload_design_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("upload_design_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "upload_design_next"
        }

        return NSLocalizedString("upload_design_next", bundle: bundle, comment: "")
      }

      /// en translation: Tổng tiền
      ///
      /// Locales: en, vi
      static func cart_total_price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_total_price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_total_price"
        }

        return NSLocalizedString("cart_total_price", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng chèn hình ảnh mà bạn có thể tạo hiệu ứng
      ///
      /// Locales: en, vi
      static func editor_no_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_no_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_no_image"
        }

        return NSLocalizedString("editor_no_image", bundle: bundle, comment: "")
      }

      /// en translation: Vui lòng chèn văn bản của bạn
      ///
      /// Locales: en, vi
      static func editor_no_text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_no_text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_no_text"
        }

        return NSLocalizedString("editor_no_text", bundle: bundle, comment: "")
      }

      /// en translation: Xoá
      ///
      /// Locales: en, vi
      static func cart_delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cart_delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cart_delete"
        }

        return NSLocalizedString("cart_delete", bundle: bundle, comment: "")
      }

      /// en translation: Xác minh số điện thoại
      ///
      /// Locales: en, vi
      static func button_submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_submit"
        }

        return NSLocalizedString("button_submit", bundle: bundle, comment: "")
      }

      /// en translation: Xác nhận
      ///
      /// Locales: en, vi
      static func button_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button_confirm"
        }

        return NSLocalizedString("button_confirm", bundle: bundle, comment: "")
      }

      /// en translation: Xóa ảnh
      ///
      /// Locales: en, vi
      static func editor_reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_reset"
        }

        return NSLocalizedString("editor_reset", bundle: bundle, comment: "")
      }

      /// en translation: Đăng ký / Đăng nhập
      ///
      /// Locales: en, vi
      static func information_auth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_auth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_auth"
        }

        return NSLocalizedString("information_auth", bundle: bundle, comment: "")
      }

      /// en translation: Đăng nhập để tiếp tục
      ///
      /// Locales: en, vi
      static func description_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("description_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "description_login"
        }

        return NSLocalizedString("description_login", bundle: bundle, comment: "")
      }

      /// en translation: Đăng xuất
      ///
      /// Locales: en, vi
      static func information_auth_no_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("information_auth_no_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "information_auth_no_login"
        }

        return NSLocalizedString("information_auth_no_login", bundle: bundle, comment: "")
      }

      /// en translation: Ảnh
      ///
      /// Locales: en, vi
      static func editor_image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_image"
        }

        return NSLocalizedString("editor_image", bundle: bundle, comment: "")
      }

      /// en translation: Ảnh của bạn
      ///
      /// Locales: en, vi
      static func editor_your_photo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("editor_your_photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "editor_your_photo"
        }

        return NSLocalizedString("editor_your_photo", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
